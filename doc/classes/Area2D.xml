<?xml version="1.0" encoding="UTF-8" ?>
<class name="Area2D" inherits="CollisionObject2D" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		2D area for detection and physics and audio influence.
	</brief_description>
	<description>
		2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping) and route audio to custom audio buses.
		To give the area its shape, add a [CollisionShape2D] or a [CollisionPolygon2D] node as a [i]direct[/i] child (or add multiple such nodes as direct children) of the area.
		[b]Warning:[/b] See [ConcavePolygonShape2D] for a warning about possibly unexpected behavior when using that shape for an area.
	</description>
	<tutorials>
		<link title="Using Area2D">$DOCS_URL/tutorials/physics/using_area_2d.html</link>
		<link title="2D Dodge The Creeps Demo">https://godotengine.org/asset-library/asset/515</link>
		<link title="2D Pong Demo">https://godotengine.org/asset-library/asset/121</link>
		<link title="2D Platformer Demo">https://godotengine.org/asset-library/asset/120</link>
	</tutorials>
	<methods>
		<method name="get_overlapping_areas" qualifiers="const">
			<return type="Area2D[]" />
			<description>
				Returns a list of intersecting [Area2D]s. The overlapping area's [member CollisionObject2D.collision_layer] must be part of this area's [member CollisionObject2D.collision_mask] in order to be detected.
				For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			</description>
		</method>
		<method name="get_overlapping_bodies" qualifiers="const">
			<return type="Node2D[]" />
			<description>
				Returns a list of intersecting [PhysicsBody2D]s and [TileMap]s. The overlapping body's [member CollisionObject2D.collision_layer] must be part of this area's [member CollisionObject2D.collision_mask] in order to be detected.
				For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			</description>
		</method>
		<method name="has_overlapping_areas" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if intersecting any [Area2D]s, otherwise returns [code]false[/code]. The overlapping area's [member CollisionObject2D.collision_layer] must be part of this area's [member CollisionObject2D.collision_mask] in order to be detected.
				For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			</description>
		</method>
		<method name="has_overlapping_bodies" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if intersecting any [PhysicsBody2D]s or [TileMap]s, otherwise returns [code]false[/code]. The overlapping body's [member CollisionObject2D.collision_layer] must be part of this area's [member CollisionObject2D.collision_mask] in order to be detected.
				For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			</description>
		</method>
		<method name="overlaps_area" qualifiers="const">
			<return type="bool" />
			<param index="0" name="area" type="Node" />
			<description>
				Returns [code]true[/code] if the given [Area2D] intersects or overlaps this [Area2D], [code]false[/code] otherwise.
				[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, the list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
			</description>
		</method>
		<method name="overlaps_body" qualifiers="const">
			<return type="bool" />
			<param index="0" name="body" type="Node" />
			<description>
				Returns [code]true[/code] if the given physics body intersects or overlaps this [Area2D], [code]false[/code] otherwise.
				[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
				The [param body] argument can either be a [PhysicsBody2D] or a [TileMap] instance. While TileMaps are not physics bodies themselves, they register their tiles with collision shapes as a virtual physics body.
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp" default="1.0">
			The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.
			See [member ProjectSettings.physics/2d/default_angular_damp] for more details about damping.
		</member>
		<member name="angular_damp_space_override" type="int" setter="set_angular_damp_space_override_mode" getter="get_angular_damp_space_override_mode" enum="Area2D.SpaceOverride" default="0">
			Override mode for angular damping calculations within this area. See [enum SpaceOverride] for possible values.
		</member>
		<member name="audio_bus_name" type="StringName" setter="set_audio_bus_name" getter="get_audio_bus_name" default="&amp;&quot;Master&quot;">
			The name of the area's audio bus.
		</member>
		<member name="audio_bus_override" type="bool" setter="set_audio_bus_override" getter="is_overriding_audio_bus" default="false">
			If [code]true[/code], the area's audio bus overrides the default audio bus.
		</member>
		<member name="gravity" type="float" setter="set_gravity" getter="get_gravity" default="980.0">
			The area's gravity intensity (in pixels per second squared). This value multiplies the gravity direction. This is useful to alter the force of gravity without altering its direction.
		</member>
		<member name="gravity_direction" type="Vector2" setter="set_gravity_direction" getter="get_gravity_direction" default="Vector2(0, 1)">
			The area's gravity vector (not normalized).
		</member>
		<member name="gravity_point" type="bool" setter="set_gravity_is_point" getter="is_gravity_a_point" default="false">
			If [code]true[/code], gravity is calculated from a point (set via [member gravity_point_center]). See also [member gravity_space_override].
		</member>
		<member name="gravity_point_center" type="Vector2" setter="set_gravity_point_center" getter="get_gravity_point_center" default="Vector2(0, 1)">
			If gravity is a point (see [member gravity_point]), this will be the point of attraction.
		</member>
		<member name="gravity_point_distance_scale" type="float" setter="set_gravity_point_distance_scale" getter="get_gravity_point_distance_scale" default="0.0">
			The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.
		</member>
		<member name="gravity_space_override" type="int" setter="set_gravity_space_override_mode" getter="get_gravity_space_override_mode" enum="Area2D.SpaceOverride" default="0">
			Override mode for gravity calculations within this area. See [enum SpaceOverride] for possible values.
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp" default="0.1">
			The rate at which objects stop moving in this area. Represents the linear velocity lost per second.
			See [member ProjectSettings.physics/2d/default_linear_damp] for more details about damping.
		</member>
		<member name="linear_damp_space_override" type="int" setter="set_linear_damp_space_override_mode" getter="get_linear_damp_space_override_mode" enum="Area2D.SpaceOverride" default="0">
			Override mode for linear damping calculations within this area. See [enum SpaceOverride] for possible values.
		</member>
		<member name="monitorable" type="bool" setter="set_monitorable" getter="is_monitorable" default="true">
			If [code]true[/code], other monitoring areas can detect this area.
		</member>
		<member name="monitoring" type="bool" setter="set_monitoring" getter="is_monitoring" default="true">
			If [code]true[/code], the area detects bodies or areas entering and exiting it.
		</member>
		<member name="priority" type="float" setter="set_priority" getter="get_priority" default="0.0">
			The area's priority. Higher priority areas are processed first.
		</member>
	</members>
	<signals>
		<signal name="area_entered">
			<param index="0" name="area" type="Area2D" />
			<description>
				Emitted when another Area2D enters this Area2D. Requires [member monitoring] to be set to [code]true[/code].
				[param area] the other Area2D.
			</description>
		</signal>
		<signal name="area_exited">
			<param index="0" name="area" type="Area2D" />
			<description>
				Emitted when another Area2D exits this Area2D. Requires [member monitoring] to be set to [code]true[/code].
				[param area] the other Area2D.
			</description>
		</signal>
		<signal name="area_shape_entered">
			<param index="0" name="area_rid" type="RID" />
			<param index="1" name="area" type="Area2D" />
			<param index="2" name="area_shape_index" type="int" />
			<param index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when one of another Area2D's [Shape2D]s enters one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code].
				[param area_rid] the [RID] of the other Area2D's [CollisionObject2D] used by the [PhysicsServer2D].
				[param area] the other Area2D.
				[param area_shape_index] the index of the [Shape2D] of the other Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]area.shape_owner_get_owner(area.shape_find_owner(area_shape_index))[/code].
				[param local_shape_index] the index of the [Shape2D] of this Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))[/code].
			</description>
		</signal>
		<signal name="area_shape_exited">
			<param index="0" name="area_rid" type="RID" />
			<param index="1" name="area" type="Area2D" />
			<param index="2" name="area_shape_index" type="int" />
			<param index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when one of another Area2D's [Shape2D]s exits one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code].
				[param area_rid] the [RID] of the other Area2D's [CollisionObject2D] used by the [PhysicsServer2D].
				[param area] the other Area2D.
				[param area_shape_index] the index of the [Shape2D] of the other Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]area.shape_owner_get_owner(area.shape_find_owner(area_shape_index))[/code].
				[param local_shape_index] the index of the [Shape2D] of this Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))[/code].
			</description>
		</signal>
		<signal name="body_entered">
			<param index="0" name="body" type="Node2D" />
			<description>
				Emitted when a [PhysicsBody2D] or [TileMap] enters this Area2D. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[param body] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
			</description>
		</signal>
		<signal name="body_exited">
			<param index="0" name="body" type="Node2D" />
			<description>
				Emitted when a [PhysicsBody2D] or [TileMap] exits this Area2D. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[param body] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
			</description>
		</signal>
		<signal name="body_shape_entered">
			<param index="0" name="body_rid" type="RID" />
			<param index="1" name="body" type="Node2D" />
			<param index="2" name="body_shape_index" type="int" />
			<param index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when one of a [PhysicsBody2D] or [TileMap]'s [Shape2D]s enters one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[param body_rid] the [RID] of the [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [PhysicsServer2D].
				[param body] the [Node], if it exists in the tree, of the [PhysicsBody2D] or [TileMap].
				[param body_shape_index] the index of the [Shape2D] of the [PhysicsBody2D] or [TileMap] used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))[/code].
				[param local_shape_index] the index of the [Shape2D] of this Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))[/code].
			</description>
		</signal>
		<signal name="body_shape_exited">
			<param index="0" name="body_rid" type="RID" />
			<param index="1" name="body" type="Node2D" />
			<param index="2" name="body_shape_index" type="int" />
			<param index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when one of a [PhysicsBody2D] or [TileMap]'s [Shape2D]s exits one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[param body_rid] the [RID] of the [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [PhysicsServer2D].
				[param body] the [Node], if it exists in the tree, of the [PhysicsBody2D] or [TileMap].
				[param body_shape_index] the index of the [Shape2D] of the [PhysicsBody2D] or [TileMap] used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))[/code].
				[param local_shape_index] the index of the [Shape2D] of this Area2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))[/code].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SPACE_OVERRIDE_DISABLED" value="0" enum="SpaceOverride">
			This area does not affect gravity/damping.
		</constant>
		<constant name="SPACE_OVERRIDE_COMBINE" value="1" enum="SpaceOverride">
			This area adds its gravity/damping values to whatever has been calculated so far (in [member priority] order).
		</constant>
		<constant name="SPACE_OVERRIDE_COMBINE_REPLACE" value="2" enum="SpaceOverride">
			This area adds its gravity/damping values to whatever has been calculated so far (in [member priority] order), ignoring any lower priority areas.
		</constant>
		<constant name="SPACE_OVERRIDE_REPLACE" value="3" enum="SpaceOverride">
			This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.
		</constant>
		<constant name="SPACE_OVERRIDE_REPLACE_COMBINE" value="4" enum="SpaceOverride">
			This area replaces any gravity/damping calculated so far (in [member priority] order), but keeps calculating the rest of the areas.
		</constant>
	</constants>
</class>
