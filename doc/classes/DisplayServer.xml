<?xml version="1.0" encoding="UTF-8" ?>
<class name="DisplayServer" inherits="Object" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clipboard_get" qualifiers="const">
			<return type="String" />
			<description>
				Returns the user's clipboard as a string if possible.
			</description>
		</method>
		<method name="clipboard_get_primary" qualifiers="const">
			<return type="String" />
			<description>
				Returns the user's primary clipboard as a string if possible.
				[b]Note:[/b] This method is only implemented on Linux.
			</description>
		</method>
		<method name="clipboard_has" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if there is content on the user's clipboard.
			</description>
		</method>
		<method name="clipboard_set">
			<return type="void" />
			<param index="0" name="clipboard" type="String" />
			<description>
				Sets the user's clipboard content to the given string.
			</description>
		</method>
		<method name="clipboard_set_primary">
			<return type="void" />
			<param index="0" name="clipboard_primary" type="String" />
			<description>
				Sets the user's primary clipboard content to the given string.
				[b]Note:[/b] This method is only implemented on Linux.
			</description>
		</method>
		<method name="create_sub_window">
			<return type="int" />
			<param index="0" name="mode" type="int" enum="DisplayServer.WindowMode" />
			<param index="1" name="vsync_mode" type="int" enum="DisplayServer.VSyncMode" />
			<param index="2" name="flags" type="int" />
			<param index="3" name="rect" type="Rect2i" default="Rect2i(0, 0, 0, 0)" />
			<description>
			</description>
		</method>
		<method name="cursor_get_shape" qualifiers="const">
			<return type="int" enum="DisplayServer.CursorShape" />
			<description>
			</description>
		</method>
		<method name="cursor_set_custom_image">
			<return type="void" />
			<param index="0" name="cursor" type="Resource" />
			<param index="1" name="shape" type="int" enum="DisplayServer.CursorShape" default="0" />
			<param index="2" name="hotspot" type="Vector2" default="Vector2(0, 0)" />
			<description>
			</description>
		</method>
		<method name="cursor_set_shape">
			<return type="void" />
			<param index="0" name="shape" type="int" enum="DisplayServer.CursorShape" />
			<description>
			</description>
		</method>
		<method name="delete_sub_window">
			<return type="void" />
			<param index="0" name="window_id" type="int" />
			<description>
			</description>
		</method>
		<method name="dialog_input_text">
			<return type="int" enum="Error" />
			<param index="0" name="title" type="String" />
			<param index="1" name="description" type="String" />
			<param index="2" name="existing_text" type="String" />
			<param index="3" name="callback" type="Callable" />
			<description>
			</description>
		</method>
		<method name="dialog_show">
			<return type="int" enum="Error" />
			<param index="0" name="title" type="String" />
			<param index="1" name="description" type="String" />
			<param index="2" name="buttons" type="PackedStringArray" />
			<param index="3" name="callback" type="Callable" />
			<description>
			</description>
		</method>
		<method name="enable_for_stealing_focus">
			<return type="void" />
			<param index="0" name="process_id" type="int" />
			<description>
			</description>
		</method>
		<method name="force_process_and_drop_events">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="get_accent_color" qualifiers="const">
			<return type="Color" />
			<description>
				Returns OS theme accent color. Returns [code]Color(0, 0, 0, 0)[/code], if accent color is unknown.
				[b]Note:[/b] This method is implemented on macOS and Windows.
			</description>
		</method>
		<method name="get_display_cutouts" qualifiers="const">
			<return type="Rect2[]" />
			<description>
				Returns an [Array] of [Rect2], each of which is the bounding rectangle for a display cutout or notch. These are non-functional areas on edge-to-edge screens used by cameras and sensors. Returns an empty array if the device does not have cutouts. See also [method get_display_safe_area].
				[b]Note:[/b] Currently only implemented on Android. Other platforms will return an empty array even if they do have display cutouts or notches.
			</description>
		</method>
		<method name="get_display_safe_area" qualifiers="const">
			<return type="Rect2i" />
			<description>
				Returns the unobscured area of the display where interactive controls should be rendered. See also [method get_display_cutouts].
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String" />
			<description>
			</description>
		</method>
		<method name="get_screen_count" qualifiers="const">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_swap_cancel_ok">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="get_window_at_screen_position" qualifiers="const">
			<return type="int" />
			<param index="0" name="position" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="get_window_list" qualifiers="const">
			<return type="PackedInt32Array" />
			<description>
			</description>
		</method>
		<method name="global_menu_add_check_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="label" type="String" />
			<param index="2" name="callback" type="Callable" />
			<param index="3" name="key_callback" type="Callable" />
			<param index="4" name="tag" type="Variant" default="null" />
			<param index="5" name="accelerator" type="int" enum="Key" default="0" />
			<param index="6" name="index" type="int" default="-1" />
			<description>
				Adds a new checkable item with text [param label] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_icon_check_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="icon" type="Texture2D" />
			<param index="2" name="label" type="String" />
			<param index="3" name="callback" type="Callable" />
			<param index="4" name="key_callback" type="Callable" />
			<param index="5" name="tag" type="Variant" default="null" />
			<param index="6" name="accelerator" type="int" enum="Key" default="0" />
			<param index="7" name="index" type="int" default="-1" />
			<description>
				Adds a new checkable item with text [param label] and icon [param icon] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_icon_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="icon" type="Texture2D" />
			<param index="2" name="label" type="String" />
			<param index="3" name="callback" type="Callable" />
			<param index="4" name="key_callback" type="Callable" />
			<param index="5" name="tag" type="Variant" default="null" />
			<param index="6" name="accelerator" type="int" enum="Key" default="0" />
			<param index="7" name="index" type="int" default="-1" />
			<description>
				Adds a new item with text [param label] and icon [param icon] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_icon_radio_check_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="icon" type="Texture2D" />
			<param index="2" name="label" type="String" />
			<param index="3" name="callback" type="Callable" />
			<param index="4" name="key_callback" type="Callable" />
			<param index="5" name="tag" type="Variant" default="null" />
			<param index="6" name="accelerator" type="int" enum="Key" default="0" />
			<param index="7" name="index" type="int" default="-1" />
			<description>
				Adds a new radio-checkable item with text [param label] and icon [param icon] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method global_menu_set_item_checked] for more info on how to control it.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="label" type="String" />
			<param index="2" name="callback" type="Callable" />
			<param index="3" name="key_callback" type="Callable" />
			<param index="4" name="tag" type="Variant" default="null" />
			<param index="5" name="accelerator" type="int" enum="Key" default="0" />
			<param index="6" name="index" type="int" default="-1" />
			<description>
				Adds a new item with text [param label] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_multistate_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="labe" type="String" />
			<param index="2" name="max_states" type="int" />
			<param index="3" name="default_state" type="int" />
			<param index="4" name="callback" type="Callable" />
			<param index="5" name="key_callback" type="Callable" />
			<param index="6" name="tag" type="Variant" default="null" />
			<param index="7" name="accelerator" type="int" enum="Key" default="0" />
			<param index="8" name="index" type="int" default="-1" />
			<description>
				Adds a new item with text [param labe] to the global menu with ID [param menu_root].
				Contrarily to normal binary items, multistate items can have more than two states, as defined by [param max_states]. Each press or activate of the item will increase the state by one. The default value is defined by [param default_state].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] By default, there's no indication of the current item state, it should be changed manually.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_radio_check_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="label" type="String" />
			<param index="2" name="callback" type="Callable" />
			<param index="3" name="key_callback" type="Callable" />
			<param index="4" name="tag" type="Variant" default="null" />
			<param index="5" name="accelerator" type="int" enum="Key" default="0" />
			<param index="6" name="index" type="int" default="-1" />
			<description>
				Adds a new radio-checkable item with text [param label] to the global menu with ID [param menu_root].
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method global_menu_set_item_checked] for more info on how to control it.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_separator">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="index" type="int" default="-1" />
			<description>
				Adds a separator between items to the global menu with ID [param menu_root]. Separators also occupy an index.
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_add_submenu_item">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="label" type="String" />
			<param index="2" name="submenu" type="String" />
			<param index="3" name="index" type="int" default="-1" />
			<description>
				Adds an item that will act as a submenu of the global menu [param menu_root]. The [param submenu] argument is the ID of the global menu root that will be shown when the item is clicked.
				Returns index of the inserted item, it's not guaranteed to be the same as [param index] value.
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_clear">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<description>
				Removes all items from the global menu with ID [param menu_root].
				[b]Note:[/b] This method is implemented on macOS.
				[b]Supported system menu IDs:[/b]
				[codeblock]
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				[/codeblock]
			</description>
		</method>
		<method name="global_menu_get_item_accelerator" qualifiers="const">
			<return type="int" enum="Key" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the accelerator of the item at index [param idx]. Accelerators are special combinations of keys that activate the item, no matter which control is focused.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_callback" qualifiers="const">
			<return type="Callable" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the callback of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_icon" qualifiers="const">
			<return type="Texture2D" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the icon of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_indentation_level" qualifiers="const">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the horizontal offset of the item at the given [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_index_from_tag" qualifiers="const">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="tag" type="Variant" />
			<description>
				Returns the index of the item with the specified [param tag]. Index is automatically assigned to each item by the engine. Index can not be set manually.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_index_from_text" qualifiers="const">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="text" type="String" />
			<description>
				Returns the index of the item with the specified [param text]. Index is automatically assigned to each item by the engine. Index can not be set manually.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_key_callback" qualifiers="const">
			<return type="Callable" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the callback of the item accelerator at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_max_states" qualifiers="const">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns number of states of an multistate item. See [method global_menu_add_multistate_item] for details.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_state" qualifiers="const">
			<return type="int" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the state of an multistate item. See [method global_menu_add_multistate_item] for details.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_submenu" qualifiers="const">
			<return type="String" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the submenu ID of the item at index [param idx]. See [method global_menu_add_submenu_item] for more info on how to add a submenu.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_tag" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the metadata of the specified item, which might be of any type. You can set it with [method global_menu_set_item_tag], which provides a simple way of assigning context data to items.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_text" qualifiers="const">
			<return type="String" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the text of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_get_item_tooltip" qualifiers="const">
			<return type="String" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns the tooltip associated with the specified index index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_is_item_checkable" qualifiers="const">
			<return type="bool" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if the item at index [param idx] is checkable in some way, i.e. if it has a checkbox or radio button.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_is_item_checked" qualifiers="const">
			<return type="bool" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if the item at index [param idx] is checked.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_is_item_disabled" qualifiers="const">
			<return type="bool" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if the item at index [param idx] is disabled. When it is disabled it can't be selected, or its action invoked.
				See [method global_menu_set_item_disabled] for more info on how to disable an item.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_is_item_radio_checkable" qualifiers="const">
			<return type="bool" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if the item at index [param idx] has radio button-style checkability.
				[b]Note:[/b] This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_remove_item">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<description>
				Removes the item at index [param idx] from the global menu [param menu_root].
				[b]Note:[/b] The indices of items after the removed item will be shifted by one.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_accelerator">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="keycode" type="int" enum="Key" />
			<description>
				Sets the accelerator of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_callback">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="callback" type="Callable" />
			<description>
				Sets the callback of the item at index [param idx]. Callback is emitted when an item is pressed.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_checkable">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="checkable" type="bool" />
			<description>
				Sets whether the item at index [param idx] has a checkbox. If [code]false[/code], sets the type of the item to plain text.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_checked">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="checked" type="bool" />
			<description>
				Sets the checkstate status of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_disabled">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="disabled" type="bool" />
			<description>
				Enables/disables the item at index [param idx]. When it is disabled, it can't be selected and its action can't be invoked.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_icon">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="icon" type="Texture2D" />
			<description>
				Replaces the [Texture2D] icon of the specified [param idx].
				[b]Note:[/b] This method is implemented on macOS.
				[b]Note:[/b] This method is not supported by macOS "_dock" menu items.
			</description>
		</method>
		<method name="global_menu_set_item_indentation_level">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="level" type="int" />
			<description>
				Sets the horizontal offset of the item at the given [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_key_callback">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="key_callback" type="Callable" />
			<description>
				Sets the callback of the item at index [param idx]. Callback is emitted when its accelerator is activated.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_max_states">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="max_states" type="int" />
			<description>
				Sets number of state of an multistate item. See [method global_menu_add_multistate_item] for details.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_radio_checkable">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="checkable" type="bool" />
			<description>
				Sets the type of the item at the specified index [param idx] to radio button. If [code]false[/code], sets the type of the item to plain text
				[b]Note:[/b] This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_state">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="state" type="int" />
			<description>
				Sets the state of an multistate item. See [method global_menu_add_multistate_item] for details.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_submenu">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="submenu" type="String" />
			<description>
				Sets the submenu of the item at index [param idx]. The submenu is the ID of a global menu root that would be shown when the item is clicked.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_tag">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="tag" type="Variant" />
			<description>
				Sets the metadata of an item, which may be of any type. You can later get it with [method global_menu_get_item_tag], which provides a simple way of assigning context data to items.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_text">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="text" type="String" />
			<description>
				Sets the text of the item at index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="global_menu_set_item_tooltip">
			<return type="void" />
			<param index="0" name="menu_root" type="String" />
			<param index="1" name="idx" type="int" />
			<param index="2" name="tooltip" type="String" />
			<description>
				Sets the [String] tooltip of the item at the specified index [param idx].
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool" />
			<param index="0" name="feature" type="int" enum="DisplayServer.Feature" />
			<description>
			</description>
		</method>
		<method name="ime_get_selection" qualifiers="const">
			<return type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="ime_get_text" qualifiers="const">
			<return type="String" />
			<description>
			</description>
		</method>
		<method name="is_dark_mode" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if OS is using dark mode.
				[b]Note:[/b] This method is implemented on macOS, Windows and Linux.
			</description>
		</method>
		<method name="is_dark_mode_supported" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if OS supports dark mode.
				[b]Note:[/b] This method is implemented on macOS, Windows and Linux.
			</description>
		</method>
		<method name="keyboard_get_current_layout" qualifiers="const">
			<return type="int" />
			<description>
				Returns active keyboard layout index.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_keycode_from_physical" qualifiers="const">
			<return type="int" enum="Key" />
			<param index="0" name="keycode" type="int" enum="Key" />
			<description>
				Converts a physical (US QWERTY) [param keycode] to one in the active keyboard layout.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of keyboard layouts.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_language" qualifiers="const">
			<return type="String" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the ISO-639/BCP-47 language code of the keyboard layout at position [param index].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_name" qualifiers="const">
			<return type="String" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the localized name of the keyboard layout at position [param index].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_set_current_layout">
			<return type="void" />
			<param index="0" name="index" type="int" />
			<description>
				Sets active keyboard layout.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="mouse_get_button_state" qualifiers="const">
			<return type="int" enum="MouseButton" />
			<description>
			</description>
		</method>
		<method name="mouse_get_mode" qualifiers="const">
			<return type="int" enum="DisplayServer.MouseMode" />
			<description>
			</description>
		</method>
		<method name="mouse_get_position" qualifiers="const">
			<return type="Vector2i" />
			<description>
				Returns the mouse cursor's current position.
			</description>
		</method>
		<method name="mouse_set_mode">
			<return type="void" />
			<param index="0" name="mouse_mode" type="int" enum="DisplayServer.MouseMode" />
			<description>
			</description>
		</method>
		<method name="process_events">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="screen_get_dpi" qualifiers="const">
			<return type="int" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
				Returns the dots per inch density of the specified screen. If [param screen] is [constant SCREEN_OF_MAIN_WINDOW] (the default value), a screen with the main window will be used.
				[b]Note:[/b] On macOS, returned value is inaccurate if fractional display scaling mode is used.
				[b]Note:[/b] On Android devices, the actual screen densities are grouped into six generalized densities:
				[codeblock]
				   ldpi - 120 dpi
				   mdpi - 160 dpi
				   hdpi - 240 dpi
				  xhdpi - 320 dpi
				 xxhdpi - 480 dpi
				xxxhdpi - 640 dpi
				[/codeblock]
				[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows. Returns [code]72[/code] on unsupported platforms.
			</description>
		</method>
		<method name="screen_get_max_scale" qualifiers="const">
			<return type="float" />
			<description>
				Returns the greatest scale factor of all screens.
				[b]Note:[/b] On macOS returned value is [code]2.0[/code] if there is at least one hiDPI (Retina) screen in the system, and [code]1.0[/code] in all other cases.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="screen_get_orientation" qualifiers="const">
			<return type="int" enum="DisplayServer.ScreenOrientation" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="screen_get_position" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="screen_get_refresh_rate" qualifiers="const">
			<return type="float" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
				Returns the current refresh rate of the specified screen. If [param screen] is [constant SCREEN_OF_MAIN_WINDOW] (the default value), a screen with the main window will be used.
				[b]Note:[/b] Returns [code]-1.0[/code] if the DisplayServer fails to find the refresh rate for the specified screen. On Web, [method screen_get_refresh_rate] will always return [code]-1.0[/code] as there is no way to retrieve the refresh rate on that platform.
				To fallback to a default refresh rate if the method fails, try:
				[codeblock]
				var refresh_rate = DisplayServer.screen_get_refresh_rate()
				if refresh_rate &lt; 0:
				    refresh_rate = 60.0
				[/codeblock]
			</description>
		</method>
		<method name="screen_get_scale" qualifiers="const">
			<return type="float" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
				Returns the scale factor of the specified screen by index.
				[b]Note:[/b] On macOS returned value is [code]2.0[/code] for hiDPI (Retina) screen, and [code]1.0[/code] for all other cases.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="screen_get_size" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="screen_get_usable_rect" qualifiers="const">
			<return type="Rect2i" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="screen_is_kept_on" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="screen_is_touchscreen" qualifiers="const">
			<return type="bool" />
			<param index="0" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="screen_set_keep_on">
			<return type="void" />
			<param index="0" name="enable" type="bool" />
			<description>
			</description>
		</method>
		<method name="screen_set_orientation">
			<return type="void" />
			<param index="0" name="orientation" type="int" enum="DisplayServer.ScreenOrientation" />
			<param index="1" name="screen" type="int" default="-1" />
			<description>
			</description>
		</method>
		<method name="set_icon">
			<return type="void" />
			<param index="0" name="image" type="Image" />
			<description>
			</description>
		</method>
		<method name="set_native_icon">
			<return type="void" />
			<param index="0" name="filename" type="String" />
			<description>
			</description>
		</method>
		<method name="tablet_get_current_driver" qualifiers="const">
			<return type="String" />
			<description>
				Returns current active tablet driver name.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="tablet_get_driver_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the total number of available tablet drivers.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="tablet_get_driver_name" qualifiers="const">
			<return type="String" />
			<param index="0" name="idx" type="int" />
			<description>
				Returns the tablet driver name for the given index.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="tablet_set_current_driver">
			<return type="void" />
			<param index="0" name="name" type="String" />
			<description>
				Set active tablet driver name.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="tts_get_voices" qualifiers="const">
			<return type="Dictionary[]" />
			<description>
				Returns an [Array] of voice information dictionaries.
				Each [Dictionary] contains two [String] entries:
				- [code]name[/code] is voice name.
				- [code]id[/code] is voice identifier.
				- [code]language[/code] is language code in [code]lang_Variant[/code] format. [code]lang[/code] part is a 2 or 3-letter code based on the ISO-639 standard, in lowercase. And [code]Variant[/code] part is an engine dependent string describing country, region or/and dialect.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_get_voices_for_language" qualifiers="const">
			<return type="PackedStringArray" />
			<param index="0" name="language" type="String" />
			<description>
				Returns an [PackedStringArray] of voice identifiers for the [param language].
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_is_paused" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the synthesizer is in a paused state.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_is_speaking" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the synthesizer is generating speech, or have utterance waiting in the queue.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_pause">
			<return type="void" />
			<description>
				Puts the synthesizer into a paused state.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_resume">
			<return type="void" />
			<description>
				Resumes the synthesizer if it was paused.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_set_utterance_callback">
			<return type="void" />
			<param index="0" name="event" type="int" enum="DisplayServer.TTSUtteranceEvent" />
			<param index="1" name="callable" type="Callable" />
			<description>
				Adds a callback, which is called when the utterance has started, finished, canceled or reached a text boundary.
				- [code]TTS_UTTERANCE_STARTED[/code], [code]TTS_UTTERANCE_ENDED[/code], and [code]TTS_UTTERANCE_CANCELED[/code] callable's method should take one [int] parameter, the utterance id.
				- [code]TTS_UTTERANCE_BOUNDARY[/code] callable's method should take two [int] parameters, the index of the character and the utterance id.
				[b]Note:[/b] The granularity of the boundary callbacks is engine dependent.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_speak">
			<return type="void" />
			<param index="0" name="text" type="String" />
			<param index="1" name="voice" type="String" />
			<param index="2" name="volume" type="int" default="50" />
			<param index="3" name="pitch" type="float" default="1.0" />
			<param index="4" name="rate" type="float" default="1.0" />
			<param index="5" name="utterance_id" type="int" default="0" />
			<param index="6" name="interrupt" type="bool" default="false" />
			<description>
				Adds an utterance to the queue. If [param interrupt] is [code]true[/code], the queue is cleared first.
				- [param voice] identifier is one of the [code]"id"[/code] values returned by [method tts_get_voices] or one of the values returned by [method tts_get_voices_for_language].
				- [param volume] ranges from [code]0[/code] (lowest) to [code]100[/code] (highest).
				- [param pitch] ranges from [code]0.0[/code] (lowest) to [code]2.0[/code] (highest), [code]1.0[/code] is default pitch for the current voice.
				- [param rate] ranges from [code]0.1[/code] (lowest) to [code]10.0[/code] (highest), [code]1.0[/code] is a normal speaking rate. Other values act as a percentage relative.
				- [param utterance_id] is passed as a parameter to the callback functions.
				[b]Note:[/b] On Windows and Linux, utterance [param text] can use SSML markup. SSML support is engine and voice dependent. If the engine does not support SSML, you should strip out all XML markup before calling [method tts_speak].
				[b]Note:[/b] The granularity of pitch, rate, and volume is engine and voice dependent. Values may be truncated.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="tts_stop">
			<return type="void" />
			<description>
				Stops synthesis in progress and removes all utterances from the queue.
				[b]Note:[/b] This method is implemented on Android, iOS, Web, Linux, macOS, and Windows.
			</description>
		</method>
		<method name="virtual_keyboard_get_height" qualifiers="const">
			<return type="int" />
			<description>
				Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden.
			</description>
		</method>
		<method name="virtual_keyboard_hide">
			<return type="void" />
			<description>
				Hides the virtual keyboard if it is shown, does nothing otherwise.
			</description>
		</method>
		<method name="virtual_keyboard_show">
			<return type="void" />
			<param index="0" name="existing_text" type="String" />
			<param index="1" name="position" type="Rect2" default="Rect2(0, 0, 0, 0)" />
			<param index="2" name="type" type="int" enum="DisplayServer.VirtualKeyboardType" default="0" />
			<param index="3" name="max_length" type="int" default="-1" />
			<param index="4" name="cursor_start" type="int" default="-1" />
			<param index="5" name="cursor_end" type="int" default="-1" />
			<description>
				Shows the virtual keyboard if the platform has one.
				[param existing_text] parameter is useful for implementing your own [LineEdit] or [TextEdit], as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).
				[param position] parameter is the screen space [Rect2] of the edited text.
				[param type] parameter allows configuring which type of virtual keyboard to show.
				[param max_length] limits the number of characters that can be entered if different from [code]-1[/code].
				[param cursor_start] can optionally define the current text cursor position if [param cursor_end] is not set.
				[param cursor_start] and [param cursor_end] can optionally define the current text selection.
				[b]Note:[/b] This method is implemented on Android, iOS and Web.
			</description>
		</method>
		<method name="warp_mouse">
			<return type="void" />
			<param index="0" name="position" type="Vector2i" />
			<description>
				Sets the mouse cursor position to the given [param position] relative to an origin at the upper left corner of the currently focused game Window Manager window.
			</description>
		</method>
		<method name="window_attach_instance_id">
			<return type="void" />
			<param index="0" name="instance_id" type="int" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_can_draw" qualifiers="const">
			<return type="bool" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_active_popup" qualifiers="const">
			<return type="int" />
			<description>
				Returns ID of the active popup window, or [constant INVALID_WINDOW_ID] if there is none.
			</description>
		</method>
		<method name="window_get_attached_instance_id" qualifiers="const">
			<return type="int" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_current_screen" qualifiers="const">
			<return type="int" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_flag" qualifiers="const">
			<return type="bool" />
			<param index="0" name="flag" type="int" enum="DisplayServer.WindowFlags" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Returns the current value of the given window's [param flag].
			</description>
		</method>
		<method name="window_get_max_size" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_min_size" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_mode" qualifiers="const">
			<return type="int" enum="DisplayServer.WindowMode" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
				Returns the mode of the given window.
			</description>
		</method>
		<method name="window_get_native_handle" qualifiers="const">
			<return type="int" />
			<param index="0" name="handle_type" type="int" enum="DisplayServer.HandleType" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Returns internal structure pointers for use in plugins.
				[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows.
			</description>
		</method>
		<method name="window_get_popup_safe_rect" qualifiers="const">
			<return type="Rect2i" />
			<param index="0" name="window" type="int" />
			<description>
				Returns the bounding box of control, or menu item that was used to open the popup window, in the screen coordinate system.
			</description>
		</method>
		<method name="window_get_position" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
				Returns the position of the given window to on the screen.
			</description>
		</method>
		<method name="window_get_real_size" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_safe_title_margins" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
				Returns left margins ([code]x[/code]), right margins ([code]y[/code]) adn height ([code]z[/code]) of the title that are safe to use (contains no buttons or other elements) when [constant WINDOW_FLAG_EXTEND_TO_TITLE] flag is set.
			</description>
		</method>
		<method name="window_get_size" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_get_vsync_mode" qualifiers="const">
			<return type="int" enum="DisplayServer.VSyncMode" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
				Returns the V-Sync mode of the given window.
			</description>
		</method>
		<method name="window_maximize_on_title_dbl_click" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code], if double-click on a window title should maximize it.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="window_minimize_on_title_dbl_click" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code], if double-click on a window title should minimize it.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="window_move_to_foreground">
			<return type="void" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_request_attention">
			<return type="void" />
			<param index="0" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_current_screen">
			<return type="void" />
			<param index="0" name="screen" type="int" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_drop_files_callback">
			<return type="void" />
			<param index="0" name="callback" type="Callable" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_exclusive">
			<return type="void" />
			<param index="0" name="window_id" type="int" />
			<param index="1" name="exclusive" type="bool" />
			<description>
				If set to [code]true[/code], this window will always stay on top of its parent window, parent window will ignore input while this window is opened.
				[b]Note:[/b] On macOS, exclusive windows are confined to the same space (virtual desktop or screen) as the parent window.
				[b]Note:[/b] This method is implemented on macOS and Windows.
			</description>
		</method>
		<method name="window_set_flag">
			<return type="void" />
			<param index="0" name="flag" type="int" enum="DisplayServer.WindowFlags" />
			<param index="1" name="enabled" type="bool" />
			<param index="2" name="window_id" type="int" default="0" />
			<description>
				Enables or disables the given window's given [param flag]. See [enum WindowFlags] for possible values and their behavior.
			</description>
		</method>
		<method name="window_set_ime_active">
			<return type="void" />
			<param index="0" name="active" type="bool" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_ime_position">
			<return type="void" />
			<param index="0" name="position" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_input_event_callback">
			<return type="void" />
			<param index="0" name="callback" type="Callable" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_input_text_callback">
			<return type="void" />
			<param index="0" name="callback" type="Callable" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_max_size">
			<return type="void" />
			<param index="0" name="max_size" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_min_size">
			<return type="void" />
			<param index="0" name="min_size" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets the minimum size for the given window to [param min_size] (in pixels).
				[b]Note:[/b] By default, the main window has a minimum size of [code]Vector2i(64, 64)[/code]. This prevents issues that can arise when the window is resized to a near-zero size.
			</description>
		</method>
		<method name="window_set_mode">
			<return type="void" />
			<param index="0" name="mode" type="int" enum="DisplayServer.WindowMode" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets window mode for the given window to [param mode]. See [enum WindowMode] for possible values and how each mode behaves.
				[b]Note:[/b] Setting the window to full screen forcibly sets the borderless flag to [code]true[/code], so make sure to set it back to [code]false[/code] when not wanted.
			</description>
		</method>
		<method name="window_set_mouse_passthrough">
			<return type="void" />
			<param index="0" name="region" type="PackedVector2Array" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through.
				Passing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).
				[codeblocks]
				[gdscript]
				# Set region, using Path2D node.
				DisplayServer.window_set_mouse_passthrough($Path2D.curve.get_baked_points())

				# Set region, using Polygon2D node.
				DisplayServer.window_set_mouse_passthrough($Polygon2D.polygon)

				# Reset region to default.
				DisplayServer.window_set_mouse_passthrough([])
				[/gdscript]
				[csharp]
				// Set region, using Path2D node.
				DisplayServer.WindowSetMousePassthrough(GetNode&lt;Path2D&gt;("Path2D").Curve.GetBakedPoints());

				// Set region, using Polygon2D node.
				DisplayServer.WindowSetMousePassthrough(GetNode&lt;Polygon2D&gt;("Polygon2D").Polygon);

				// Reset region to default.
				DisplayServer.WindowSetMousePassthrough(new Vector2[] {});
				[/csharp]
				[/codeblocks]
				[b]Note:[/b] On Windows, the portion of a window that lies outside the region is not drawn, while on Linux and macOS it is.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="window_set_popup_safe_rect">
			<return type="void" />
			<param index="0" name="window" type="int" />
			<param index="1" name="rect" type="Rect2i" />
			<description>
				Sets the bounding box of control, or menu item that was used to open the popup window, in the screen coordinate system. Clicking this area will not auto-close this popup.
			</description>
		</method>
		<method name="window_set_position">
			<return type="void" />
			<param index="0" name="position" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets the position of the given window to [param position].
			</description>
		</method>
		<method name="window_set_rect_changed_callback">
			<return type="void" />
			<param index="0" name="callback" type="Callable" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="window_set_size">
			<return type="void" />
			<param index="0" name="size" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets the size of the given window to [param size].
			</description>
		</method>
		<method name="window_set_title">
			<return type="void" />
			<param index="0" name="title" type="String" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets the title of the given window to [param title].
			</description>
		</method>
		<method name="window_set_transient">
			<return type="void" />
			<param index="0" name="window_id" type="int" />
			<param index="1" name="parent_window_id" type="int" />
			<description>
				Sets window transient parent. Transient window is will be destroyed with its transient parent and will return focus to their parent when closed. The transient window is displayed on top of a non-exclusive full-screen parent window. Transient windows can't enter full-screen mode.
				Note that behavior might be different depending on the platform.
			</description>
		</method>
		<method name="window_set_vsync_mode">
			<return type="void" />
			<param index="0" name="vsync_mode" type="int" enum="DisplayServer.VSyncMode" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				Sets the V-Sync mode of the given window.
				See [enum DisplayServer.VSyncMode] for possible values and how they affect the behavior of your application.
				Depending on the platform and used renderer, the engine will fall back to [constant VSYNC_ENABLED], if the desired mode is not supported.
			</description>
		</method>
		<method name="window_set_window_buttons_offset">
			<return type="void" />
			<param index="0" name="offset" type="Vector2i" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
				When [constant WINDOW_FLAG_EXTEND_TO_TITLE] flag is set, set offset to the center of the first titlebar button.
				[b]Note:[/b] This flag is implemented on macOS.
			</description>
		</method>
		<method name="window_set_window_event_callback">
			<return type="void" />
			<param index="0" name="callback" type="Callable" />
			<param index="1" name="window_id" type="int" default="0" />
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FEATURE_GLOBAL_MENU" value="0" enum="Feature">
		</constant>
		<constant name="FEATURE_SUBWINDOWS" value="1" enum="Feature">
		</constant>
		<constant name="FEATURE_TOUCHSCREEN" value="2" enum="Feature">
		</constant>
		<constant name="FEATURE_MOUSE" value="3" enum="Feature">
		</constant>
		<constant name="FEATURE_MOUSE_WARP" value="4" enum="Feature">
		</constant>
		<constant name="FEATURE_CLIPBOARD" value="5" enum="Feature">
		</constant>
		<constant name="FEATURE_VIRTUAL_KEYBOARD" value="6" enum="Feature">
		</constant>
		<constant name="FEATURE_CURSOR_SHAPE" value="7" enum="Feature">
		</constant>
		<constant name="FEATURE_CUSTOM_CURSOR_SHAPE" value="8" enum="Feature">
		</constant>
		<constant name="FEATURE_NATIVE_DIALOG" value="9" enum="Feature">
		</constant>
		<constant name="FEATURE_IME" value="10" enum="Feature">
		</constant>
		<constant name="FEATURE_WINDOW_TRANSPARENCY" value="11" enum="Feature">
		</constant>
		<constant name="FEATURE_HIDPI" value="12" enum="Feature">
		</constant>
		<constant name="FEATURE_ICON" value="13" enum="Feature">
		</constant>
		<constant name="FEATURE_NATIVE_ICON" value="14" enum="Feature">
		</constant>
		<constant name="FEATURE_ORIENTATION" value="15" enum="Feature">
		</constant>
		<constant name="FEATURE_SWAP_BUFFERS" value="16" enum="Feature">
		</constant>
		<constant name="FEATURE_CLIPBOARD_PRIMARY" value="18" enum="Feature">
		</constant>
		<constant name="FEATURE_TEXT_TO_SPEECH" value="19" enum="Feature">
			Display server supports text-to-speech. See [code]tts_*[/code] methods.
		</constant>
		<constant name="FEATURE_EXTEND_TO_TITLE" value="20" enum="Feature">
			Display server supports expanding window content to the title. See [constant WINDOW_FLAG_EXTEND_TO_TITLE].
		</constant>
		<constant name="MOUSE_MODE_VISIBLE" value="0" enum="MouseMode">
			Makes the mouse cursor visible if it is hidden.
		</constant>
		<constant name="MOUSE_MODE_HIDDEN" value="1" enum="MouseMode">
			Makes the mouse cursor hidden if it is visible.
		</constant>
		<constant name="MOUSE_MODE_CAPTURED" value="2" enum="MouseMode">
			Captures the mouse. The mouse will be hidden and its position locked at the center of the screen.
			[b]Note:[/b] If you want to process the mouse's movement in this mode, you need to use [member InputEventMouseMotion.relative].
		</constant>
		<constant name="MOUSE_MODE_CONFINED" value="3" enum="MouseMode">
			Confines the mouse cursor to the game window, and make it visible.
		</constant>
		<constant name="MOUSE_MODE_CONFINED_HIDDEN" value="4" enum="MouseMode">
			Confines the mouse cursor to the game window, and make it hidden.
		</constant>
		<constant name="SCREEN_OF_MAIN_WINDOW" value="-1">
		</constant>
		<constant name="MAIN_WINDOW_ID" value="0">
		</constant>
		<constant name="INVALID_WINDOW_ID" value="-1">
		</constant>
		<constant name="SCREEN_LANDSCAPE" value="0" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_PORTRAIT" value="1" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_REVERSE_LANDSCAPE" value="2" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_REVERSE_PORTRAIT" value="3" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_SENSOR_LANDSCAPE" value="4" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_SENSOR_PORTRAIT" value="5" enum="ScreenOrientation">
		</constant>
		<constant name="SCREEN_SENSOR" value="6" enum="ScreenOrientation">
		</constant>
		<constant name="KEYBOARD_TYPE_DEFAULT" value="0" enum="VirtualKeyboardType">
			Default text virtual keyboard.
		</constant>
		<constant name="KEYBOARD_TYPE_MULTILINE" value="1" enum="VirtualKeyboardType">
			Multiline virtual keyboard.
		</constant>
		<constant name="KEYBOARD_TYPE_NUMBER" value="2" enum="VirtualKeyboardType">
			Virtual number keypad, useful for PIN entry.
		</constant>
		<constant name="KEYBOARD_TYPE_NUMBER_DECIMAL" value="3" enum="VirtualKeyboardType">
			Virtual number keypad, useful for entering fractional numbers.
		</constant>
		<constant name="KEYBOARD_TYPE_PHONE" value="4" enum="VirtualKeyboardType">
			Virtual phone number keypad.
		</constant>
		<constant name="KEYBOARD_TYPE_EMAIL_ADDRESS" value="5" enum="VirtualKeyboardType">
			Virtual keyboard with additional keys to assist with typing email addresses.
		</constant>
		<constant name="KEYBOARD_TYPE_PASSWORD" value="6" enum="VirtualKeyboardType">
			Virtual keyboard for entering a password. On most platforms, this should disable autocomplete and autocapitalization.
			[b]Note:[/b] This is not supported on Web. Instead, this behaves identically to [constant KEYBOARD_TYPE_DEFAULT].
		</constant>
		<constant name="KEYBOARD_TYPE_URL" value="7" enum="VirtualKeyboardType">
			Virtual keyboard with additional keys to assist with typing URLs.
		</constant>
		<constant name="CURSOR_ARROW" value="0" enum="CursorShape">
		</constant>
		<constant name="CURSOR_IBEAM" value="1" enum="CursorShape">
		</constant>
		<constant name="CURSOR_POINTING_HAND" value="2" enum="CursorShape">
		</constant>
		<constant name="CURSOR_CROSS" value="3" enum="CursorShape">
		</constant>
		<constant name="CURSOR_WAIT" value="4" enum="CursorShape">
		</constant>
		<constant name="CURSOR_BUSY" value="5" enum="CursorShape">
		</constant>
		<constant name="CURSOR_DRAG" value="6" enum="CursorShape">
		</constant>
		<constant name="CURSOR_CAN_DROP" value="7" enum="CursorShape">
		</constant>
		<constant name="CURSOR_FORBIDDEN" value="8" enum="CursorShape">
		</constant>
		<constant name="CURSOR_VSIZE" value="9" enum="CursorShape">
		</constant>
		<constant name="CURSOR_HSIZE" value="10" enum="CursorShape">
		</constant>
		<constant name="CURSOR_BDIAGSIZE" value="11" enum="CursorShape">
		</constant>
		<constant name="CURSOR_FDIAGSIZE" value="12" enum="CursorShape">
		</constant>
		<constant name="CURSOR_MOVE" value="13" enum="CursorShape">
		</constant>
		<constant name="CURSOR_VSPLIT" value="14" enum="CursorShape">
		</constant>
		<constant name="CURSOR_HSPLIT" value="15" enum="CursorShape">
		</constant>
		<constant name="CURSOR_HELP" value="16" enum="CursorShape">
		</constant>
		<constant name="CURSOR_MAX" value="17" enum="CursorShape">
		</constant>
		<constant name="WINDOW_MODE_WINDOWED" value="0" enum="WindowMode">
			Windowed mode, i.e. [Window] doesn't occupy the whole screen (unless set to the size of the screen).
		</constant>
		<constant name="WINDOW_MODE_MINIMIZED" value="1" enum="WindowMode">
			Minimized window mode, i.e. [Window] is not visible and available on window manager's window list. Normally happens when the minimize button is pressed.
		</constant>
		<constant name="WINDOW_MODE_MAXIMIZED" value="2" enum="WindowMode">
			Maximized window mode, i.e. [Window] will occupy whole screen area except task bar and still display its borders. Normally happens when the minimize button is pressed.
		</constant>
		<constant name="WINDOW_MODE_FULLSCREEN" value="3" enum="WindowMode">
			Full screen window mode. Note that this is not [i]exclusive[/i] full screen. On Windows and Linux, a borderless window is used to emulate full screen. On macOS, a new desktop is used to display the running project.
			Regardless of the platform, enabling full screen will change the window size to match the monitor's size. Therefore, make sure your project supports [url=$DOCS_URL/tutorials/rendering/multiple_resolutions.html]multiple resolutions[/url] when enabling full screen mode.
		</constant>
		<constant name="WINDOW_MODE_EXCLUSIVE_FULLSCREEN" value="4" enum="WindowMode">
			Exclusive full screen window mode. This mode is implemented on Windows only. On other platforms, it is equivalent to [constant WINDOW_MODE_FULLSCREEN].
			Only one window in exclusive full screen mode can be visible on a given screen at a time. If multiple windows are in exclusive full screen mode for the same screen, the last one being set to this mode takes precedence.
			Regardless of the platform, enabling full screen will change the window size to match the monitor's size. Therefore, make sure your project supports [url=$DOCS_URL/tutorials/rendering/multiple_resolutions.html]multiple resolutions[/url] when enabling full screen mode.
		</constant>
		<constant name="WINDOW_FLAG_RESIZE_DISABLED" value="0" enum="WindowFlags">
			The window can't be resizing by dragging its resize grip. It's still possible to resize the window using [method window_set_size]. This flag is ignored for full screen windows.
		</constant>
		<constant name="WINDOW_FLAG_BORDERLESS" value="1" enum="WindowFlags">
			The window do not have native title bar and other decorations. This flag is ignored for full-screen windows.
		</constant>
		<constant name="WINDOW_FLAG_ALWAYS_ON_TOP" value="2" enum="WindowFlags">
			The window is floating on top of all other windows. This flag is ignored for full-screen windows.
		</constant>
		<constant name="WINDOW_FLAG_TRANSPARENT" value="3" enum="WindowFlags">
			The window background can be transparent.
			[b]Note:[/b] This flag has no effect if [member ProjectSettings.display/window/per_pixel_transparency/allowed] is set to [code]false[/code].
			[b]Note:[/b] Transparency support is implemented on Linux, macOS and Windows, but availability might vary depending on GPU driver, display manager, and compositor capabilities.
		</constant>
		<constant name="WINDOW_FLAG_NO_FOCUS" value="4" enum="WindowFlags">
			The window can't be focused. No-focus window will ignore all input, except mouse clicks.
		</constant>
		<constant name="WINDOW_FLAG_POPUP" value="5" enum="WindowFlags">
			Window is part of menu or [OptionButton] dropdown. This flag can't be changed when the window is visible. An active popup window will exclusively receive all input, without stealing focus from its parent. Popup windows are automatically closed when uses click outside it, or when an application is switched. Popup window must have [code]transient parent[/code] set (see [method window_set_transient]).
		</constant>
		<constant name="WINDOW_FLAG_EXTEND_TO_TITLE" value="6" enum="WindowFlags">
			Window content is expanded to the full size of the window. Unlike borderless window, the frame is left intact and can be used to resize the window, title bar is transparent, but have minimize/maximize/close buttons.
			Use [method window_set_window_buttons_offset] to adjust minimize/maximize/close buttons offset.
			Use [method window_get_safe_title_margins] to determine area under the title bar that is not covered by decorations.
			[b]Note:[/b] This flag is implemented on macOS.
		</constant>
		<constant name="WINDOW_FLAG_MAX" value="7" enum="WindowFlags">
			Max value of the [enum WindowFlags].
		</constant>
		<constant name="WINDOW_EVENT_MOUSE_ENTER" value="0" enum="WindowEvent">
			Sent when the mouse pointer enters the window, see [method window_set_window_event_callback].
		</constant>
		<constant name="WINDOW_EVENT_MOUSE_EXIT" value="1" enum="WindowEvent">
			Sent when the mouse pointer exits the window, see [method window_set_window_event_callback].
		</constant>
		<constant name="WINDOW_EVENT_FOCUS_IN" value="2" enum="WindowEvent">
			Sent when the window grabs focus, see [method window_set_window_event_callback].
		</constant>
		<constant name="WINDOW_EVENT_FOCUS_OUT" value="3" enum="WindowEvent">
			Sent when the window loses focus, see [method window_set_window_event_callback].
		</constant>
		<constant name="WINDOW_EVENT_CLOSE_REQUEST" value="4" enum="WindowEvent">
			Sent when the user has attempted to close the window (e.g. close button is pressed), see [method window_set_window_event_callback].
		</constant>
		<constant name="WINDOW_EVENT_GO_BACK_REQUEST" value="5" enum="WindowEvent">
			Sent when the device "Back" button is pressed, see [method window_set_window_event_callback].
			[b]Note:[/b] This event is implemented on Android.
		</constant>
		<constant name="WINDOW_EVENT_DPI_CHANGE" value="6" enum="WindowEvent">
			Sent when the window is moved to the display with different DPI, or display DPI is changed, see [method window_set_window_event_callback].
			[b]Note:[/b] This flag is implemented on macOS.
		</constant>
		<constant name="WINDOW_EVENT_TITLEBAR_CHANGE" value="7" enum="WindowEvent">
			Sent when the window title bar decoration is changed (e.g. [constant WINDOW_FLAG_EXTEND_TO_TITLE] is set or window entered/exited full screen mode), see [method window_set_window_event_callback].
			[b]Note:[/b] This flag is implemented on macOS.
		</constant>
		<constant name="VSYNC_DISABLED" value="0" enum="VSyncMode">
			No vertical synchronization, which means the engine will display frames as fast as possible (tearing may be visible).
		</constant>
		<constant name="VSYNC_ENABLED" value="1" enum="VSyncMode">
			Default vertical synchronization mode, the image is displayed only on vertical blanking intervals (no tearing is visible).
		</constant>
		<constant name="VSYNC_ADAPTIVE" value="2" enum="VSyncMode">
			Behaves like [constant VSYNC_DISABLED] when the framerate drops below the screen's refresh rate to reduce stuttering (tearing may be visible), otherwise vertical synchronization is enabled to avoid tearing.
		</constant>
		<constant name="VSYNC_MAILBOX" value="3" enum="VSyncMode">
			Displays the most recent image in the queue on vertical blanking intervals, while rendering to the other images (no tearing is visible).
			Although not guaranteed, the images can be rendered as fast as possible, which may reduce input lag.
		</constant>
		<constant name="DISPLAY_HANDLE" value="0" enum="HandleType">
			Display handle:
			- Linux: [code]X11::Display*[/code] for the display.
		</constant>
		<constant name="WINDOW_HANDLE" value="1" enum="HandleType">
			Window handle:
			- Windows: [code]HWND[/code] for the window.
			- Linux: [code]X11::Window*[/code] for the window.
			- macOS: [code]NSWindow*[/code] for the window.
			- iOS: [code]UIViewController*[/code] for the view controller.
			- Android: [code]jObject[/code] for the activity.
		</constant>
		<constant name="WINDOW_VIEW" value="2" enum="HandleType">
			Window view:
			- macOS: [code]NSView*[/code] for the window main view.
			- iOS: [code]UIView*[/code] for the window main view.
		</constant>
		<constant name="TTS_UTTERANCE_STARTED" value="0" enum="TTSUtteranceEvent">
			Utterance has begun to be spoken.
		</constant>
		<constant name="TTS_UTTERANCE_ENDED" value="1" enum="TTSUtteranceEvent">
			Utterance was successfully finished.
		</constant>
		<constant name="TTS_UTTERANCE_CANCELED" value="2" enum="TTSUtteranceEvent">
			Utterance was canceled, or TTS service was unable to process it.
		</constant>
		<constant name="TTS_UTTERANCE_BOUNDARY" value="3" enum="TTSUtteranceEvent">
			Utterance reached a word or sentence boundary.
		</constant>
	</constants>
</class>
