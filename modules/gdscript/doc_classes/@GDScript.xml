<?xml version="1.0" encoding="UTF-8" ?>
<class name="@GDScript" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Built-in GDScript functions.
	</brief_description>
	<description>
		A list of GDScript-specific utility functions accessed in any script.
		For the list of the global functions and constants see [@GlobalScope].
	</description>
	<tutorials>
		<link title="GDScript exports">$DOCS_URL/tutorials/scripting/gdscript/gdscript_exports.html</link>
	</tutorials>
	<methods>
		<method name="Color8">
			<return type="Color" />
			<param index="0" name="r8" type="int" />
			<param index="1" name="g8" type="int" />
			<param index="2" name="b8" type="int" />
			<param index="3" name="a8" type="int" default="255" />
			<description>
				Returns a color constructed from integer red, green, blue, and alpha channels. Each channel should have 8 bits of information ranging from 0 to 255.
				[code]r8[/code] red channel
				[code]g8[/code] green channel
				[code]b8[/code] blue channel
				[code]a8[/code] alpha channel
				[codeblock]
				red = Color8(255, 0, 0)
				[/codeblock]
			</description>
		</method>
		<method name="assert">
			<return type="void" />
			<param index="0" name="condition" type="bool" />
			<param index="1" name="message" type="String" default="&quot;&quot;" />
			<description>
				Asserts that the [code]condition[/code] is [code]true[/code]. If the [code]condition[/code] is [code]false[/code], an error is generated. When running from the editor, the running project will also be paused until you resume it. This can be used as a stronger form of [method @GlobalScope.push_error] for reporting errors to project developers or add-on users.
				[b]Note:[/b] For performance reasons, the code inside [method assert] is only executed in debug builds or when running the project from the editor. Don't include code that has side effects in an [method assert] call. Otherwise, the project will behave differently when exported in release mode.
				The optional [code]message[/code] argument, if given, is shown in addition to the generic "Assertion failed" message. It must be a static string, so format strings can't be used. You can use this to provide additional details about why the assertion failed.
				[codeblock]
				# Imagine we always want speed to be between 0 and 20.
				var speed = -10
				assert(speed &lt; 20) # True, the program will continue
				assert(speed &gt;= 0) # False, the program will stop
				assert(speed &gt;= 0 and speed &lt; 20) # You can also combine the two conditional statements in one check
				assert(speed &lt; 20, "the speed limit is 20") # Show a message
				[/codeblock]
			</description>
		</method>
		<method name="char">
			<return type="String" />
			<param index="0" name="char" type="int" />
			<description>
				Returns a character as a String of the given Unicode code point (which is compatible with ASCII code).
				[codeblock]
				a = char(65)      # a is "A"
				a = char(65 + 32) # a is "a"
				a = char(8364)    # a is "â‚¬"
				[/codeblock]
			</description>
		</method>
		<method name="convert">
			<return type="Variant" />
			<param index="0" name="what" type="Variant" />
			<param index="1" name="type" type="int" />
			<description>
				Converts from a type to another in the best way possible. The [code]type[/code] parameter uses the [enum Variant.Type] values.
				[codeblock]
				a = Vector2(1, 0)
				# Prints 1
				print(a.length())
				a = convert(a, TYPE_STRING)
				# Prints 6 as "(1, 0)" is 6 characters
				print(a.length())
				[/codeblock]
			</description>
		</method>
		<method name="dict_to_inst">
			<return type="Object" />
			<param index="0" name="dictionary" type="Dictionary" />
			<description>
				Converts a [param dictionary] (previously created with [method inst_to_dict]) back to an Object instance. Useful for deserializing.
			</description>
		</method>
		<method name="get_stack">
			<return type="Array" />
			<description>
				Returns an array of dictionaries representing the current call stack. See also [method print_stack].
				[codeblock]
				func _ready():
				    foo()

				func foo():
				    bar()

				func bar():
				    print(get_stack())
				[/codeblock]
				would print
				[codeblock]
				[{function:bar, line:12, source:res://script.gd}, {function:foo, line:9, source:res://script.gd}, {function:_ready, line:6, source:res://script.gd}]
				[/codeblock]
				[b]Note:[/b] [method get_stack] only works if the running instance is connected to a debugging server (i.e. an editor instance). [method get_stack] will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.
				[b]Note:[/b] Not supported for calling from threads. Instead, this will return an empty array.
			</description>
		</method>
		<method name="inst_to_dict">
			<return type="Dictionary" />
			<param index="0" name="instance" type="Object" />
			<description>
				Returns the passed [param instance] converted to a Dictionary (useful for serializing).
				[codeblock]
				var foo = "bar"
				func _ready():
				    var d = inst_to_dict(self)
				    print(d.keys())
				    print(d.values())
				[/codeblock]
				Prints out:
				[codeblock]
				[@subpath, @path, foo]
				[, res://test.gd, bar]
				[/codeblock]
			</description>
		</method>
		<method name="len">
			<return type="int" />
			<param index="0" name="var" type="Variant" />
			<description>
				Returns length of Variant [code]var[/code]. Length is the character count of String, element count of Array, size of Dictionary, etc.
				[b]Note:[/b] Generates a fatal error if Variant can not provide a length.
				[codeblock]
				a = [1, 2, 3, 4]
				len(a) # Returns 4
				[/codeblock]
			</description>
		</method>
		<method name="load">
			<return type="Resource" />
			<param index="0" name="path" type="String" />
			<description>
				Loads a resource from the filesystem located at [code]path[/code]. The resource is loaded on the method call (unless it's referenced already elsewhere, e.g. in another script or in the scene), which might cause slight delay, especially when loading scenes. To avoid unnecessary delays when loading something multiple times, either store the resource in a variable or use [method preload].
				[b]Note:[/b] Resource paths can be obtained by right-clicking on a resource in the FileSystem dock and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
				[codeblock]
				# Load a scene called main located in the root of the project directory and cache it in a variable.
				var main = load("res://main.tscn") # main will contain a PackedScene resource.
				[/codeblock]
				[b]Important:[/b] The path must be absolute, a local path will just return [code]null[/code].
				This method is a simplified version of [method ResourceLoader.load], which can be used for more advanced scenarios.
				[b]Note:[/b] You have to import the files into the engine first to load them using [method load]. If you want to load [Image]s at run-time, you may use [method Image.load]. If you want to import audio files, you can use the snippet described in [member AudioStreamMP3.data].
			</description>
		</method>
		<method name="preload">
			<return type="Resource" />
			<param index="0" name="path" type="String" />
			<description>
				Returns a [Resource] from the filesystem located at [code]path[/code]. The resource is loaded during script parsing, i.e. is loaded with the script and [method preload] effectively acts as a reference to that resource. Note that the method requires a constant path. If you want to load a resource from a dynamic/variable path, use [method load].
				[b]Note:[/b] Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
				[codeblock]
				# Instance a scene.
				var diamond = preload("res://diamond.tscn").instantiate()
				[/codeblock]
			</description>
		</method>
		<method name="print_debug" qualifiers="vararg">
			<return type="void" />
			<description>
				Like [method @GlobalScope.print], but includes the current stack frame when running with the debugger turned on.
				Output in the console would look something like this:
				[codeblock]
				Test print
				   At: res://test.gd:15:_process()
				[/codeblock]
				[b]Note:[/b] Not supported for calling from threads. Instead of the stack frame, this will print the thread ID.
			</description>
		</method>
		<method name="print_stack">
			<return type="void" />
			<description>
				Prints a stack trace at the current code location. See also [method get_stack].
				Output in the console would look something like this:
				[codeblock]
				Frame 0 - res://test.gd:16 in function '_process'
				[/codeblock]
				[b]Note:[/b] [method print_stack] only works if the running instance is connected to a debugging server (i.e. an editor instance). [method print_stack] will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.
				[b]Note:[/b] Not supported for calling from threads. Instead of the stack trace, this will print the thread ID.
			</description>
		</method>
		<method name="range" qualifiers="vararg">
			<return type="Array" />
			<description>
				Returns an array with the given range. [method range] can be called in three ways:
				[code]range(n: int)[/code]: Starts from 0, increases by steps of 1, and stops [i]before[/i] [code]n[/code]. The argument [code]n[/code] is [b]exclusive[/b].
				[code]range(b: int, n: int)[/code]: Starts from [code]b[/code], increases by steps of 1, and stops [i]before[/i] [code]n[/code]. The arguments [code]b[/code] and [code]n[/code] are [b]inclusive[/b] and [b]exclusive[/b], respectively.
				[code]range(b: int, n: int, s: int)[/code]: Starts from [code]b[/code], increases/decreases by steps of [code]s[/code], and stops [i]before[/i] [code]n[/code]. The arguments [code]b[/code] and [code]n[/code] are [b]inclusive[/b] and [b]exclusive[/b], respectively. The argument [code]s[/code] [b]can[/b] be negative, but not [code]0[/code]. If [code]s[/code] is [code]0[/code], an error message is printed.
				[method range] converts all arguments to [int] before processing.
				[b]Note:[/b] Returns an empty array if no value meets the value constraint (e.g. [code]range(2, 5, -1)[/code] or [code]range(5, 5, 1)[/code]).
				Examples:
				[codeblock]
				print(range(4))        # Prints [0, 1, 2, 3]
				print(range(2, 5))     # Prints [2, 3, 4]
				print(range(0, 6, 2))  # Prints [0, 2, 4]
				print(range(4, 1, -1)) # Prints [4, 3, 2]
				[/codeblock]
				To iterate over an [Array] backwards, use:
				[codeblock]
				var array = [3, 6, 9]
				for i in range(array.size(), 0, -1):
				    print(array[i - 1])
				[/codeblock]
				Output:
				[codeblock]
				9
				6
				3
				[/codeblock]
				To iterate over [float], convert them in the loop.
				[codeblock]
				for i in range (3, 0, -1):
				    print(i / 10.0)
				[/codeblock]
				Output:
				[codeblock]
				0.3
				0.2
				0.1
				[/codeblock]
			</description>
		</method>
		<method name="str" qualifiers="vararg">
			<return type="String" />
			<description>
				Converts one or more arguments to string in the best way possible.
				[codeblock]
				var a = [10, 20, 30]
				var b = str(a);
				len(a) # Returns 3
				len(b) # Returns 12
				[/codeblock]
			</description>
		</method>
		<method name="type_exists">
			<return type="bool" />
			<param index="0" name="type" type="StringName" />
			<description>
				Returns whether the given [Object]-derived class exists in [ClassDB]. Note that [Variant] data types are not registered in [ClassDB].
				[codeblock]
				type_exists("Sprite2D") # Returns true
				type_exists("NonExistentClass") # Returns false
				[/codeblock]
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PI" value="3.14159265358979">
			Constant that represents how many times the diameter of a circle fits around its perimeter. This is equivalent to [code]TAU / 2[/code], or 180 degrees in rotations.
		</constant>
		<constant name="TAU" value="6.28318530717959">
			The circle constant, the circumference of the unit circle in radians. This is equivalent to [code]PI * 2[/code], or 360 degrees in rotations.
		</constant>
		<constant name="INF" value="inf">
			Positive floating-point infinity. This is the result of floating-point division when the divisor is [code]0.0[/code]. For negative infinity, use [code]-INF[/code]. Dividing by [code]-0.0[/code] will result in negative infinity if the numerator is positive, so dividing by [code]0.0[/code] is not the same as dividing by [code]-0.0[/code] (despite [code]0.0 == -0.0[/code] returning [code]true[/code]).
			[b]Note:[/b] Numeric infinity is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer number by [code]0[/code] will not result in [constant INF] and will result in a run-time error instead.
		</constant>
		<constant name="NAN" value="nan">
			"Not a Number", an invalid floating-point value. [constant NAN] has special properties, including that it is not equal to itself ([code]NAN == NAN[/code] returns [code]false[/code]). It is output by some invalid operations, such as dividing floating-point [code]0.0[/code] by [code]0.0[/code].
			[b]Note:[/b] "Not a Number" is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer [code]0[/code] by [code]0[/code] will not result in [constant NAN] and will result in a run-time error instead.
		</constant>
	</constants>
	<annotations>
		<annotation name="@export">
			<return type="void" />
			<description>
				Mark the following property as exported (editable in the Inspector dock and saved to disk). To control the type of the exported property use the type hint notation.
				[codeblock]
				@export var int_number = 5
				@export var float_number: float = 5
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_category">
			<return type="void" />
			<param index="0" name="name" type="String" />
			<description>
				Define a new category for the following exported properties. This helps to organize properties in the Inspector dock.
				See also [constant PROPERTY_USAGE_CATEGORY].
				[codeblock]
				@export_category("My Properties")
				@export var number = 3
				@export var string = ""
				[/codeblock]
				[b]Note:[/b] Categories in the property list are supposed to indicate different base types, so the use of this annotation is not encouraged. See [annotation @export_group] and [annotation @export_subgroup] instead.
			</description>
		</annotation>
		<annotation name="@export_color_no_alpha">
			<return type="void" />
			<description>
				Export a [Color] property without an alpha (fixed as [code]1.0[/code]).
				See also [constant PROPERTY_HINT_COLOR_NO_ALPHA].
				[codeblock]
				@export_color_no_alpha var modulate_color: Color
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_dir">
			<return type="void" />
			<description>
				Export a [String] property as a path to a directory. The path will be limited to the project folder and its subfolders. See [annotation @export_global_dir] to allow picking from the entire filesystem.
				See also [constant PROPERTY_HINT_DIR].
				[codeblock]
				@export_dir var sprite_folder: String
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_enum" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="names" type="String" />
			<description>
				Export a [String] or integer property as an enumerated list of options. If the property is an integer field, then the index of the value is stored, in the same order the values are provided. You can add specific identifiers for allowed values using a colon.
				See also [constant PROPERTY_HINT_ENUM].
				[codeblock]
				@export_enum("Rebecca", "Mary", "Leah") var character_name: String
				@export_enum("Warrior", "Magician", "Thief") var character_class: int
				@export_enum("Walking:30", "Running:60", "Riding:200") var character_speed: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_exp_easing" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="hints" type="String" default="&quot;&quot;" />
			<description>
				Export a floating-point property with an easing editor widget. Additional hints can be provided to adjust the behavior of the widget. [code]"attenuation"[/code] flips the curve, which makes it more intuitive for editing attenuation properties. [code]"positive_only"[/code] limits values to only be greater than or equal to zero.
				See also [constant PROPERTY_HINT_EXP_EASING].
				[codeblock]
				@export_exp_easing var transition_speed
				@export_exp_easing("attenuation") var fading_attenuation
				@export_exp_easing("positive_only") var effect_power
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_file" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="filter" type="String" default="&quot;&quot;" />
			<description>
				Export a [String] property as a path to a file. The path will be limited to the project folder and its subfolders. See [annotation @export_global_file] to allow picking from the entire filesystem.
				If [param filter] is provided, only matching files will be available for picking.
				See also [constant PROPERTY_HINT_FILE].
				[codeblock]
				@export_file var sound_effect_file: String
				@export_file("*.txt") var notes_file: String
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="names" type="String" />
			<description>
				Export an integer property as a bit flag field. This allows to store several "checked" or [code]true[/code] values with one property, and comfortably select them from the Inspector dock.
				See also [constant PROPERTY_HINT_FLAGS].
				[codeblock]
				@export_flags("Fire", "Water", "Earth", "Wind") var spell_elements = 0
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_2d_navigation">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 2D navigation layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/2d_navigation/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_2D_NAVIGATION].
				[codeblock]
				@export_flags_2d_navigation var navigation_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_2d_physics">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 2D physics layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/2d_physics/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_2D_PHYSICS].
				[codeblock]
				@export_flags_2d_physics var physics_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_2d_render">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 2D render layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/2d_render/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_2D_RENDER].
				[codeblock]
				@export_flags_2d_render var render_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_3d_navigation">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 3D navigation layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/3d_navigation/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_3D_NAVIGATION].
				[codeblock]
				@export_flags_3d_navigation var navigation_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_3d_physics">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 3D physics layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/3d_physics/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_3D_PHYSICS].
				[codeblock]
				@export_flags_3d_physics var physics_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_flags_3d_render">
			<return type="void" />
			<description>
				Export an integer property as a bit flag field for 3D render layers. The widget in the Inspector dock will use the layer names defined in [member ProjectSettings.layer_names/3d_render/layer_1].
				See also [constant PROPERTY_HINT_LAYERS_3D_RENDER].
				[codeblock]
				@export_flags_3d_render var render_layers: int
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_global_dir">
			<return type="void" />
			<description>
				Export a [String] property as a path to a directory. The path can be picked from the entire filesystem. See [annotation @export_dir] to limit it to the project folder and its subfolders.
				See also [constant PROPERTY_HINT_GLOBAL_DIR].
				[codeblock]
				@export_global_dir var sprite_folder: String
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_global_file" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="filter" type="String" default="&quot;&quot;" />
			<description>
				Export a [String] property as a path to a file. The path can be picked from the entire filesystem. See [annotation @export_file] to limit it to the project folder and its subfolders.
				If [param filter] is provided, only matching files will be available for picking.
				See also [constant PROPERTY_HINT_GLOBAL_FILE].
				[codeblock]
				@export_global_file var sound_effect_file: String
				@export_global_file("*.txt") var notes_file: String
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_group">
			<return type="void" />
			<param index="0" name="name" type="String" />
			<param index="1" name="prefix" type="String" default="&quot;&quot;" />
			<description>
				Define a new group for the following exported properties. This helps to organize properties in the Inspector dock. Groups can be added with an optional [param prefix], which would make group to only consider properties that have this prefix. The grouping will break on the first property that doesn't have a prefix. The prefix is also removed from the property's name in the Inspector dock.
				If no [param prefix] is provided, the every following property is added to the group. The group ends when then next group or category is defined. You can also force end a group by using this annotation with empty strings for parameters, [code]@export_group("", "")[/code].
				Groups cannot be nested, use [annotation @export_subgroup] to add subgroups to your groups.
				See also [constant PROPERTY_USAGE_GROUP].
				[codeblock]
				@export_group("My Properties")
				@export var number = 3
				@export var string = ""

				@export_group("Prefixed Properties", "prefix_")
				@export var prefix_number = 3
				@export var prefix_string = ""

				@export_group("", "")
				@export var ungrouped_number = 3
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_multiline">
			<return type="void" />
			<description>
				Export a [String] property with a large [TextEdit] widget instead of a [LineEdit]. This adds support for multiline content and makes it easier to edit large amount of text stored in the property.
				See also [constant PROPERTY_HINT_MULTILINE_TEXT].
				[codeblock]
				@export_multiline var character_bio
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_node_path" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="type" type="String" default="&quot;&quot;" />
			<description>
				Export a [NodePath] property with a filter for allowed node types.
				See also [constant PROPERTY_HINT_NODE_PATH_VALID_TYPES].
				[codeblock]
				@export_node_path(Button, TouchScreenButton) var some_button
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_placeholder">
			<return type="void" />
			<param index="0" name="placeholder" type="String" />
			<description>
				Export a [String] property with a placeholder text displayed in the editor widget when no value is present.
				See also [constant PROPERTY_HINT_PLACEHOLDER_TEXT].
				[codeblock]
				@export_placeholder("Name in lowercase") var character_id: String
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_range" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="min" type="float" />
			<param index="1" name="max" type="float" />
			<param index="2" name="step" type="float" default="1.0" />
			<param index="3" name="extra_hints" type="String" default="&quot;&quot;" />
			<description>
				Export a numeric property as a range value. The range must be defined by [param min] and [param max], as well as an optional [param step] and a variety of extra hints. The [param step] defaults to [code]1[/code] for integer properties. For floating-point numbers this value depends on your [code]EditorSettings.interface/inspector/default_float_step[/code] setting.
				If hints [code]"or_greater"[/code] and [code]"or_less"[/code] are provided, the editor widget will not cap the value at range boundaries. The [code]"exp"[/code] hint will make the edited values on range to change exponentially. The [code]"hide_slider"[/code] hint will hide the slider element of the editor widget.
				Hints also allow to indicate the units for the edited value. Using [code]"radians"[/code] you can specify that the actual value is in radians, but should be displayed in degrees in the Inspector dock. [code]"degrees"[/code] allows to add a degree sign as a unit suffix. Finally, a custom suffix can be provided using [code]"suffix:unit"[/code], where "unit" can be any string.
				See also [constant PROPERTY_HINT_RANGE].
				[codeblock]
				@export_range(0, 20) var number
				@export_range(-10, 20) var number
				@export_range(-10, 20, 0.2) var number: float

				@export_range(0, 100, 1, "or_greater") var power_percent
				@export_range(0, 100, 1, "or_greater", "or_less") var health_delta

				@export_range(-3.14, 3.14, 0.001, "radians") var angle_radians
				@export_range(0, 360, 1, "degrees") var angle_degrees
				@export_range(-8, 8, 2, "suffix:px") var target_offset
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@export_subgroup">
			<return type="void" />
			<param index="0" name="name" type="String" />
			<param index="1" name="prefix" type="String" default="&quot;&quot;" />
			<description>
				Define a new subgroup for the following exported properties. This helps to organize properties in the Inspector dock. Subgroups work exactly like groups, except they need a parent group to exist. See [annotation @export_group].
				See also [constant PROPERTY_USAGE_SUBGROUP].
				[codeblock]
				@export_group("My Properties")
				@export var number = 3
				@export var string = ""

				@export_subgroup("My Prefixed Properties", "prefix_")
				@export var prefix_number = 3
				@export var prefix_string = ""
				[/codeblock]
				[b]Note:[/b] Subgroups cannot be nested, they only provide one extra level of depth. Just like the next group ends the previous group, so do the subsequent subgroups.
			</description>
		</annotation>
		<annotation name="@icon">
			<return type="void" />
			<param index="0" name="icon_path" type="String" />
			<description>
				Add a custom icon to the current script. The icon is displayed in the Scene dock for every node that the script is attached to. For named classes the icon is also displayed in various editor dialogs.
				[codeblock]
				@icon("res://path/to/class/icon.svg")
				[/codeblock]
				[b]Note:[/b] Only the script can have a custom icon. Inner classes are not supported yet.
			</description>
		</annotation>
		<annotation name="@onready">
			<return type="void" />
			<description>
				Mark the following property as assigned on [Node]'s ready state change. Values for these properties are not assigned immediately upon the node's creation, and instead are computed and stored right before [method Node._ready].
				[codeblock]
				@onready var character_name: Label = $Label
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@rpc" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="mode" type="String" default="&quot;&quot;" />
			<param index="1" name="sync" type="String" default="&quot;&quot;" />
			<param index="2" name="transfer_mode" type="String" default="&quot;&quot;" />
			<param index="3" name="transfer_channel" type="int" default="0" />
			<description>
				Mark the following method for remote procedure calls. See [url=$DOCS_URL/tutorials/networking/high_level_multiplayer.html]High-level multiplayer[/url].
				[codeblock]
				@rpc()
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@tool">
			<return type="void" />
			<description>
				Mark the current script as a tool script, allowing it to be loaded and executed by the editor. See [url=$DOCS_URL/tutorials/plugins/running_code_in_the_editor.html]Running code in the editor[/url].
				[codeblock]
				@tool
				extends Node
				[/codeblock]
			</description>
		</annotation>
		<annotation name="@warning_ignore" qualifiers="vararg">
			<return type="void" />
			<param index="0" name="warning" type="String" />
			<description>
				Mark the following statement to ignore the specified warning. See [url=$DOCS_URL/tutorials/scripting/gdscript/warning_system.html]GDScript warning system[/url].
				[codeblock]
				func test():
				    print("hello")
				    return
				    @warning_ignore("unreachable_code")
				    print("unreachable")
				[/codeblock]
			</description>
		</annotation>
	</annotations>
</class>
